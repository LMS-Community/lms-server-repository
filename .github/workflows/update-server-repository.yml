name: Update LMS Server Repository

on:
  schedule:
    - cron: "26 */8 * * *"
  workflow_dispatch:

jobs:
  merge:
    name: Update server repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install "@aws-sdk/client-s3" jstoxml@3 dotenv@16 fast-xml-parser@4

      - name: Update S3 bucket
        env:
          ACCESS_KEY_ID: '${{ secrets.ACCESS_KEY_ID }}'
          SECRET_ACCESS_KEY: '${{ secrets.SECRET_ACCESS_KEY }}'
        run: node tools/updateRepository.mjs

      - name: Commit Changes (if needed)
        if: ${{ env.DEBUG == '' }}
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo No changes to commit
          else
            git config user.name "LMS Server Repository Updater"
            git config user.email "michael@slimdevices.com"
            git add latest.xml stable.xml dev.xml servers.json
            git commit -a -m "Update Server Repository ${{ github.event.inputs.version }}"
            git push
          fi

      - name: Log Changes
        if: ${{ env.DEBUG }}
        run: |
          git --no-pager diff
          git status

      - name: Cleanup old runs
        if: ${{ env.DEBUG == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const days_to_expiration = 30;
            const thresholdTimestamp = Date.now() - days_to_expiration * 86400000;

            const response = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              page: 3,
              per_page: 100,
              workflow_id: 'update-server-repository.yml'
            });

            for (const run of response.data.workflow_runs) {
              if (Date.parse(run.created_at) < thresholdTimestamp) {
                console.log(`Run id ${run.id} is older than ${days_to_expiration} days. Deleting...`);
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
