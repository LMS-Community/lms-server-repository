name: Update LMS Server Repository

on:
  schedule:
    - cron: "26 */8 * * *"
  workflow_dispatch:

env:
  STABLE_BRANCH: "8.3"
  DEV_BRANCH: "8.4"

jobs:
  merge:
    name: Update server repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install fast-xml-parser node-fetch@2

      - name: Update Repositories
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs/promises');
            const { XMLParser } = require('fast-xml-parser');
            const fetch = require('node-fetch');

            const parser = new XMLParser({
              ignoreAttributes : false,
              attributeNamePrefix : ''
            });

            const repos = {
              latest: (parser.parse(await fs.readFile('latest.xml'))).servers,
              stable: await getRepo('stable', process.env.STABLE_BRANCH),
              dev: await getRepo('dev', process.env.DEV_BRANCH)
            };

            delete repos.latest.version;
            ['dev', 'stable'].forEach(k => {
              repos[repos[k].version] = repos[k];
              delete repos[k].version;
              delete repos[k];
            });

            const old = JSON.parse(await fs.readFile('servers.json'));

            if (!deepEqual(old, repos)) {
              console.log("need to commit?!?");
              await fs.writeFile('servers.json', JSON.stringify(repos, null, 4));
            }

            async function getRepo(label, branch) {
              const response = await fetch('https://downloads.slimdevices.com/nightly/?xml=1&ver=' + branch);
              const body = await response.text();

              await fs.writeFile(`${label}.xml`, body);

              const json = parser.parse(body);
              const version = (Object.values(json.servers).find(v => v.version )).version;

              return { ...json.servers, version };
            }

            function deepEqual(object1, object2) {
              const keys1 = Object.keys(object1);
              const keys2 = Object.keys(object2);

              if (keys1.length !== keys2.length) {
                return false;
              }

              for (const key of keys1) {
                const val1 = object1[key];
                const val2 = object2[key];
                const areObjects = isObject(val1) && isObject(val2);
                if (
                  areObjects && !deepEqual(val1, val2) ||
                  !areObjects && val1 !== val2
                ) {
                  return false;
                }
              }

              return true;
            }

            function isObject(object) {
              return object != null && typeof object === 'object';
            }

      - name: Commit Changes (if needed)
        if: ${{ env.DEBUG == '' }}
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo No changes to commit
          else
            git config user.name "LMS Server Repository Updater"
            git config user.email "noreply-server-updater@herger.net"
            git add latest.xml stable.xml dev.xml servers.json
            git commit -a -m "Update Server Repository ${{ github.event.inputs.version }}"
            git push
          fi

      - name: Log Changes
        if: ${{ env.DEBUG }}
        run: |
          git --no-pager diff
          git status

      - name: Cleanup old runs
        uses: actions/github-script@v7
        with:
          script: |
            const days_to_expiration = 30;
            const thresholdTimestamp = Date.now() - days_to_expiration * 86400000;

            const response = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              page: 3,
              per_page: 100,
              workflow_id: 'update-server-repository.yml'
            });

            for (const run of response.data.workflow_runs) {
              if (Date.parse(run.created_at) < thresholdTimestamp) {
                console.log(`Run id ${run.id} is older than ${days_to_expiration} days. Deleting...`);
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
