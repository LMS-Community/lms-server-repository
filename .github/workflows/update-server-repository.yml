name: Update LMS Plugin Repository

on:
  # schedule:
  #   - cron: "06 */6 * * *"
  workflow_dispatch:

env:
  MAX_REMOVAL_DIFF: 3

jobs:
  merge:
    name: Update plugin repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install fast-xml-parser node-fetch@2

      - name: Update Repositories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs/promises');
            const path = require('path');
            const { XMLParser } = require('fast-xml-parser');
            const fetch = require('node-fetch');

            const repos = {
              latest: await getRepo('https://downloads.slimdevices.com/releases/latest.xml'),
              stable: await getRepo('https://downloads.slimdevices.com/releases/nightly/stable.xml'),
              dev: await getRepo('https://downloads.slimdevices.com/releases/nightly/dev.xml')
            };

            delete repos.latest.version;
            ['dev', 'stable'].forEach(k => {
              repos[repos[k].version] = repos[k];
              delete repos[k].version;
              delete repos[k];
            });

            const old = JSON.parse(await fs.readFile('servers.json'));

            if (!deepEqual(old, repos)) {
              console.log("need to commit?!?");
              await fs.writeFile('servers.json', JSON.stringify(repos, null, 4));
            }

            async function getRepo(url) {
              const response = await fetch(url);
              const body = await response.text();

              const parser = new XMLParser({
                ignoreAttributes : false,
                attributeNamePrefix : ''
              });

              const urlObj = new URL(url);
              await fs.writeFile(path.basename(urlObj.pathname), body);

              const json = parser.parse(body);
              let version = 999999;

              version = (Object.values(json.servers).find(v => v.version )).version;

              return { ...json.servers, version };
            }

            function deepEqual(object1, object2) {
              const keys1 = Object.keys(object1);
              const keys2 = Object.keys(object2);

              if (keys1.length !== keys2.length) {
                return false;
              }

              for (const key of keys1) {
                const val1 = object1[key];
                const val2 = object2[key];
                const areObjects = isObject(val1) && isObject(val2);
                if (
                  areObjects && !deepEqual(val1, val2) ||
                  !areObjects && val1 !== val2
                ) {
                  return false;
                }
              }

              return true;
            }

            function isObject(object) {
              return object != null && typeof object === 'object';
            }

      - name: Commit Changes (if needed)
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo No changes to commit
          elif "${{ secrets.GITHUB_TOKEN }}" ne ""; then
            git config user.name "LMS Server Repository Updater"
            git config user.email "noreply-server-updater@herger.net"
            git add latest.xml stable.xml dev.xml servers.json
            git commit -a -m "Update Server Repository ${{ github.event.inputs.version }}"
            git push
          else
            # git diff
            git status
          fi

      - name: Cleanup old runs
        uses: actions/github-script@v7
        if: '${{ secrets.GITHUB_TOKEN }}' != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const days_to_expiration = 30;
            const thresholdTimestamp = Date.now() - days_to_expiration * 86400000;

            const response = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              page: 3,
              per_page: 100,
              workflow_id: 'update-server-repository.yml'
            });

            for (const run of response.data.workflow_runs) {
              if (Date.parse(run.created_at) < thresholdTimestamp) {
                console.log(`Run id ${run.id} is older than ${days_to_expiration} days. Deleting...`);
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
